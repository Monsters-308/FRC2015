// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc.team308.robot.commands;

import edu.wpi.first.wpilibj.CANTalon.ControlMode;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team308.robot.Globals;
import org.usfirst.frc.team308.robot.Robot;

/**
 *
 */
public class TeleopDrive extends Command {

	boolean rotatedzero = true;
	boolean usepid = false;

	public TeleopDrive() {
		// Use requires() here to declare subsystem dependencies
		// eg. requires(chassis);

		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
		requires(Robot.drivetrain);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {
		if (Globals.testMode) {
			Robot.drivetrain.testmode();
			Robot.drivetrain
					.mecanumDrive(Robot.oi.joystick1.getX(),
							Robot.oi.joystick1.getY(),
							Robot.oi.joystick1.getRawAxis(2));
		} else {
			Robot.drivetrain.normalmode();
			if (Math.abs(Robot.oi.joystick1.getRawAxis(2)) > 0.15) { // if driver
																// commands
																// non zero
																// rotation
				Robot.drivetrain.disablePID();
				Robot.drivetrain.mecanumDrive(Robot.oi.joystick1.getX(), // rotate
																			// as
																			// commanded
						Robot.oi.joystick1.getY(), Robot.oi.joystick1.getZ());
				rotatedzero = false;
				usepid = false;
			} else if (!rotatedzero && !usepid) { // called once after rotation
													// becomes 0
				rotatedzero = true;
				Robot.drivetrain.mecanumDrive(Robot.oi.joystick1.getX(),
						Robot.oi.joystick1.getY(), 0);// sets 0 rotation
			} else if (rotatedzero && !usepid) { // waits for robot to slow down
													// before activating gryo
													// PID
				if (Math.abs(Robot.drivetrain.getGyro()) <= 12) {
					usepid = true;
					Robot.drivetrain.enablePID();
				} else {
					Robot.drivetrain.mecanumDrive(Robot.oi.joystick1.getX(),
							Robot.oi.joystick1.getY(), 0); // command 0 rotation
				}
			} else { // uses pid output to drive straight
				Robot.drivetrain.mecanumDrive(Robot.oi.joystick1.getX(),
						Robot.oi.joystick1.getY(), Globals.gyroPIDOutput);
			}
		}
	}

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return false;
	}

	// Called once after isFinished returns true
	protected void end() {
		Robot.drivetrain.disablePID();
		Robot.drivetrain.mecanumDrive(0, 0, 0);
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {
		end();
	}
}
